<?xml version="1.0" encoding="UTF-8"?>

<project name="lab3" default="build">

    <property file="build.properties"/>

    <path id="classpath">
        <fileset dir="${lib.dir}" includes="*.jar"/>
        <fileset dir="${main.dir}" includes="*.java"/>
    </path>

    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${contrib}"/>
        </classpath>
    </taskdef>

    <path id="classpath.test">
        <pathelement location="${junit}"/>
        <pathelement location="${hamcrest}"/>
        <pathelement location="${classes.dir}"/>
    </path>

    <target name="prepare" depends="clean">
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${test.classes.dir}"/>
    </target>

    <target name="compile" depends="prepare">
        <javac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="classpath" includeantruntime="false"
               failonerror="true" errorProperty="abebka"/>
    </target>

    <target name="build" depends="compile, music">
        <copy todir="${build.dir}">
            <fileset dir="${web.dir}"/>
        </copy>
        <copy todir="${build.dir.lib}">
            <fileset dir="${lib.dir}"/>
        </copy>
        <copy todir="${classes.dir}">
            <fileset dir="${resources.dir}"/>
        </copy>
        <jar destfile="${build.dir}/${ant.project.name}.jar">
            <fileset dir="${classes.dir}"/>
            <manifest>
                <attribute name="Created-By" value="abebka228"/>
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="Main-Class" value="NoClass"/>
            </manifest>
        </jar>
        <war destfile="${build.dir}/${ant.project.name}.war" webxml="${build.web.xml}">
            <fileset dir="${build.dir}"/>
            <manifest>
                <attribute name="Created-By" value="abebka228"/>
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="Main-Class" value="NoClass"/>
            </manifest>
        </war>
    </target>

    <target name="clean">
        <delete dir="${build.dir}"/>
        <delete dir="${junit.report.dir}"/>
    </target>

    <!-- music - воспроизведение музыки по завершению сборки (цель build) -->
    <target name="music">
        <sound>
            <success source="${sounds.dir}/sample-3s.wav" duration="5500"/>
            <fail source="${sounds.dir}/ample-9s.wav" duration="5000"/>
        </sound>
        <!-- Для отдельного запуска цели music -->
        <!--        <antcall target="build"/>-->
    </target>

    <target name="test" depends="build">
        <mkdir dir="${junit.report.dir}"/>
        <mkdir dir="${test.classes.dir}"/>
        <javac destdir="${test.classes.dir}" srcdir="${test.dir}" includeantruntime="false" encoding="utf-8">
            <classpath refid="classpath.test"/>
        </javac>
        <junit printsummary="yes" haltonfailure="no" failureproperty="test.failure">
            <classpath>
                <path refid="classpath.test"/>
                <pathelement location="${test.classes.dir}"/>
            </classpath>
            <formatter type="xml"/>
            <batchtest fork="yes" todir="${junit.report.dir}">
                <fileset dir="${test.dir}">
                    <include name="*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="native2ascii">
        <native2ascii encoding="UTF8" src="${src.dir}" dest="${native2ascii.resources}" includes="**/*.properties">
            <mapper type="glob" from="*.properties" to="*_ascii.properties"/>
        </native2ascii>
    </target>

    <target name="xml">
        <xmlvalidate failonerror="true" lenient="true">
            <fileset dir="./" includes="**/*.xml"/>
        </xmlvalidate>
    </target>

    <target name="doc" depends="build">
        <delete dir="tmp"/>
        <delete dir="${doc.dir}"/>
        <mkdir dir="${doc.dir}"/>
        <mkdir dir="tmp"/>
        <!-- Generate Javadoc -->
        <javadoc destdir="tmp" sourcepath="${main.dir}" classpathref="classpath">
            <packageset dir="${src.dir}" defaultexcludes="yes">
                <include name="com/example/lab3/**"/>
            </packageset>
        </javadoc>

        <!-- Create a jar file for the generated Javadoc -->
        <jar destfile="${doc.dir}/javadoc.jar" basedir="tmp"/>
        <!-- Delete files that we archived -->
        <delete dir="tmp"/>

        <!-- Generate MD5 and SHA-1 for project files -->
        <checksum file="${build.dir}/lab3.war" property="md5value" algorithm="MD5"/>
        <checksum file="${build.dir}/lab3.war" property="sha1value" algorithm="SHA"/>

        <!-- Add MD5 and SHA-1 to MANIFEST.MF -->
        <jar destfile="${build.dir}/${ant.project.name}.war" update="true">
            <manifest>
                <attribute name="MD5-Digest" value="${md5value}"/>
                <attribute name="SHA1-Digest" value="${sha1value}"/>
            </manifest>
        </jar>
    </target>

    <target name="diff">
        <!-- Загрузка имен классов из файла параметров -->
        <loadfile property="checkClasses" srcFile="parameters.txt"/>
        <propertyregex property="classes.list" input="${checkClasses}" regexp="\s+" replace="," global="true"
                       override="true"/>
        <!-- Проверка состояния рабочей копии -->
        <exec executable="git" outputproperty="git.status">
            <arg line="status --porcelain"/>
        </exec>

        <!-- Проверка, есть ли изменения в классах, указанных в файле параметров -->
        <for list="${classes.list}" param="class">
            <sequential>
                <condition property="class.@{class}.changed">
                    <contains string="${git.status}" substring="@{class}"/>
                </condition>

                <!-- Если изменения есть, выполнение commit в репозиторий Git -->
                <if>
                    <isset property="class.@{class}.changed"/>
                    <then>
                        <echo message="Changes in class: @{class}"/>
                        <exec executable="git">
                            <arg line="add @{class}"/>
                        </exec>
                        <exec executable="git">
                            <arg line="commit -m 'Commit changes in @{class}'"/>
                        </exec>
                    </then>
                </if>
            </sequential>
        </for>
    </target>
    <!--  <for list="${classes.list}" param="class">
    <sequential>
        <condition property="changed">
            <contains string="${git.status}" substring="@{class}"/>
        </condition>
    </sequential>
                   <if>
            <isset property="changed"/>
            <then>

                <exec executable="git">
                    <arg line="add *"/>
                </exec>
                <exec executable="git">
                    <arg line="commit -m 'Commit changes in classes'"/>
                </exec>
            </then>
        </if>
</for> -->


    <target name="alt">

        <mkdir dir="${other.dir}"/>
        <copy todir="${other.main.dir}">
            <fileset dir="${src.dir}"/>
        </copy>

        <replace dir="${other.main.dir}/java" includes="**/*.java" propertyFile="build.properties">
            <replacefilter token="${our.class}" property="their.class"/>
        </replace>

        <replaceregexp match="${our.var}" replace="${their.var}" flags="g">
            <fileset dir="${other.main.dir}"/>
        </replaceregexp>

        <move file="${other.main.dir}/java/com/example/lab3/${our.class}.java"
              tofile="${other.main.dir}/java/com/example/lab3/${their.class}.java"/>
        <antcall target="build" inheritRefs="true">
            <param name="src.dir" value="${other.main.dir}"/>
            <param name="build.dir" value="alttarget"/>
            <param name="jar.name" value="alt${jar.name}"/>
        </antcall>

    </target>

    <target name="report" depends="test">
        <!-- Если тесты прошли успешно, выполнение commit -->
        <if>
            <not>
                <isset property="test.failure"/>
            </not>
            <then>
                <echo message="Tests passed"/>
                <exec executable="git">
                    <arg line="add ${junit.report.dir}/*.xml"/>
                </exec>
                <exec executable="git">
                    <arg line="commit -m 'Add JUnit report'"/>
                </exec>
            </then>
        </if>
    </target>

    <!--    **history** - если проект не удаётся скомпилировать (цель compile), загружается предыдущая версия из
    репозитория svn. Операция повторяется до тех пор, пока проект не удастся собрать, либо не будет получена самая
    первая ревизия из репозитория. Если такая ревизия найдена, то формируется файл, содержащий результат операции
    diff для всех файлов, измёненных в ревизии, следующей непосредственно за последней работающей.-->
    <target name="history">
        <property name="revision" value="3"/>
        <for begin="3" end="1" param="revision" step="-1">
            <sequential>
                <if>
                    <isset property="stop"/>
                    <then>
                    </then>
                    <else>
                        <echo message="Checkout revision @{revision}"/>
                        <exec executable="svn" outputproperty="svn.status">
                            <arg line="update -r@{revision}"/>
                        </exec>
                        <trycatch>
                            <try>
                                <antcall target="compile"/>
                            </try>
                            <catch>
                                <property name="compile.failed" value="true"/>
                            </catch>
                        </trycatch>
                        <if>
                            <isset property="compile.failed"/>
                            <then>
                                <exec executable="svn" outputproperty="svn.log">
                                    <arg line="log -r@{revision}"/>
                                </exec>
                                <echo message="Project compiled with errors"/>
                                <echo file="diff@{revision}.txt" message="${svn.log}"/>
                            </then>
                            <else>
                                <echo message="Project compiled successfully"/>
                                <property name="stop" value="true"/>
                            </else>
                        </if>
                    </else>
                </if>
            </sequential>
        </for>
    </target>


</project>