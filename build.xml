<?xml version="1.0" encoding="UTF-8"?>

<project name="lab3" default="build">

    <property file="build.properties"/>

    <path id="classpath">
        <fileset dir="${lib.dir}" includes="*.jar"/>
        <fileset dir="${main.dir}" includes="*.java"/>
    </path>

    <path id="classpath.test">
        <pathelement location="${junit}"/>
        <pathelement location="${hamcrest}"/>
        <pathelement location="${classes.dir}"/>
    </path>

    <target name="prepare" depends="clean">
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${test.classes.dir}"/>
    </target>

    <target name="compile" depends="prepare">
        <javac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="classpath" includeantruntime="false"/>
    </target>

    <target name="build" depends="compile">
        <copy todir="${build.dir}">
            <fileset dir="${web.dir}"/>
        </copy>
        <copy todir="${build.dir.lib}">
            <fileset dir="${lib.dir}"/>
        </copy>
        <copy todir="${classes.dir}">
            <fileset dir="${resources.dir}"/>
        </copy>
        <jar destfile="${build.dir}/${ant.project.name}.jar">
            <fileset dir="${classes.dir}"/>
            <manifest>
                <attribute name="Created-By" value="abebka228"/>
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="Main-Class" value="NoClass"/>
            </manifest>
        </jar>
        <war destfile="${build.dir}/${ant.project.name}.war" webxml="${build.web.xml}">
            <fileset dir="${build.dir}"/>
            <manifest>
                <attribute name="Created-By" value="abebka228"/>
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="Main-Class" value="NoClass"/>
            </manifest>
        </war>
    </target>

    <target name="clean" depends="music">
        <delete dir="${build.dir}"/>
        <delete dir="${junit.report.dir}"/>
    </target>

    <!-- music - воспроизведение музыки по завершению сборки (цель build) -->
    <target name="music">
        <sound>
            <success source="${sounds.dir}/sample-3s.wav" duration="5500"/>
            <fail source="${sounds.dir}/ample-9s.wav" duration="5000"/>
        </sound>
    </target>

    <target name="test" depends="build">
        <mkdir dir="${junit.report.dir}"/>
        <mkdir dir="${test.classes.dir}"/>
        <javac destdir="${test.classes.dir}" srcdir="${test.dir}" includeantruntime="false" encoding="utf-8">
            <classpath refid="classpath.test"/>
        </javac>
        <junit printsummary="yes" haltonfailure="no">
            <classpath>
                <path refid="classpath.test"/>
                <pathelement location="${test.classes.dir}"/>
            </classpath>
            <formatter type="xml"/>
            <batchtest fork="yes" todir="${junit.report.dir}">
                <fileset dir="${test.dir}">
                    <include name="*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="native2ascii">
        <native2ascii encoding="UTF8" src="${src.dir}" dest="${native2ascii.resources}" includes="**/*.properties">
            <mapper type="glob" from="*.properties" to="*_ascii.properties"/>
        </native2ascii>
    </target>

    <target name="xml">
        <xmlvalidate failonerror="true" lenient="true">
            <fileset dir="./" includes="**/*.xml"/>
        </xmlvalidate>
    </target>

    <target name="doc" depends="build">
        <delete dir="tmp"/>
        <delete dir="${doc.dir}"/>
        <mkdir dir="${doc.dir}"/>
        <mkdir dir="tmp"/>
        <!-- Generate Javadoc -->
        <javadoc destdir="tmp" sourcepath="${main.dir}" classpathref="classpath">
            <packageset dir="${src.dir}" defaultexcludes="yes">
                <include name="com/example/lab3/**"/>
            </packageset>
        </javadoc>

        <!-- Create a jar file for the generated Javadoc -->
        <jar destfile="${doc.dir}/javadoc.jar" basedir="tmp"/>
        <!-- Delete files that we archived -->
        <delete dir="tmp"/>

        <!-- Generate MD5 and SHA-1 for project files -->
        <checksum file="${build.dir}/lab3.war" property="md5value" algorithm="MD5"/>
        <checksum file="${build.dir}/lab3.war" property="sha1value" algorithm="SHA"/>

        <!-- Add MD5 and SHA-1 to MANIFEST.MF -->
        <jar destfile="${build.dir}/${ant.project.name}.war" update="true">
            <manifest>
                <attribute name="MD5-Digest" value="${md5value}"/>
                <attribute name="SHA1-Digest" value="${sha1value}"/>
            </manifest>
        </jar>
    </target>

    <!--    <target name="env" depends="clean">-->
    <!--        <echo message="***** ENV STARTED *****"/>-->

    <!--        <mkdir dir="${classes.dir}"/>-->
    <!--        <javac srcdir="${main.dir}" destdir="${classes.dir}" classpathref="classpath" source="${compile.version}"-->
    <!--               includeantruntime="false">-->
    <!--            <compilerarg line="${vm.args}"/>-->
    <!--        </javac>-->
    <!--        <copy todir="${classes.dir}">-->
    <!--            <fileset dir="${resources.dir}"/>-->
    <!--        </copy>-->
    <!--        <antcall target="build"/>-->
    <!--        <copy file="${build.dir}/lab3.war" todir="${scp.dir}"/>-->
    <!--        <exec executable="cmd">-->
    <!--            <arg line="/c start ${env.script}"/>-->
    <!--        </exec>-->
    <!--        <echo message="***** ENV COMPLETED *****"/>-->
    <!--    </target>-->

    <!--    <target name="report" depends="test">-->
    <!--        <echo message="***** REPORT STARTED *****"/>-->

    <!--        <condition property="tests.successful">-->
    <!--            <not>-->
    <!--                <isset property="tests.failed" />-->
    <!--            </not>-->
    <!--        </condition>-->

    <!--        <if>-->
    <!--            <isset property="tests.successful" />-->
    <!--            <then>-->
    <!--                <junitreport todir="${junit.report.dir}">-->
    <!--                    <fileset dir="${junit.report.dir}" includes="TEST-*.xml" />-->
    <!--                    <report todir="${junit.report.dir}" />-->
    <!--                </junitreport>-->

    <!--                <move todir="${svn.dir}">-->
    <!--                    <fileset dir="${junit.report.dir}" includes="TESTS-*.xml"/>-->
    <!--                </move>-->

    <!--                <exec executable="svn">-->
    <!--                    <arg value="add" />-->
    <!--                    <arg value="${svn.dir}/*" />-->
    <!--                </exec>-->
    <!--                <exec executable="svn">-->
    <!--                    <arg value="update" />-->
    <!--                    <arg value="${svn.dir}"/>-->
    <!--                </exec>-->
    <!--                <exec executable="svn">-->
    <!--                    <arg value="commit" />-->
    <!--                    <arg value="${svn.dir}"/>-->
    <!--                    <arg value="-m" />-->
    <!--                    <arg value="Update report" />-->
    <!--                </exec>-->
    <!--            </then>-->
    <!--            <else>-->
    <!--                <echo message="Tests were not successful. Skipping report generation." />-->
    <!--            </else>-->
    <!--        </if>-->
    <!--        <echo message="***** REPORT COMPLETED *****"/>-->
    <!--    </target>-->

    <!-- Доп: сначала запустить compile, потом test, а затем сделать merge в master -->
    <!--
    <target name="compile-test-merge">
        <antcall target="compile"/>
        <antcall target="test"/>
        <exec executable="git">
            <arg value="add"/>
            <arg value="."/>
        </exec>
        <exec executable="git">
            <arg value="commit"/>
            <arg value="-m"/>
            <arg value="Commit messages"/>
        </exec>
        <exec executable="git">
            <arg value="checkout"/>
            <arg value="master"/>
        </exec>
        <echo message="**** MERGE STARTED *****"/>
        <exec executable="git">
            <arg value="merge"/>
            <arg value="br2"/>
        </exec>
        <exec executable="git">
            <arg value="checkout"/>
            <arg value="br2"/>
        </exec>
        <echo message="***** MERGE COMPLETED *****"/>
    </target>
    -->


    <target name="alt">

        <mkdir dir="${other.dir}"/>
        <copy todir="${other.main.dir}">
            <fileset dir="${src.dir}"/>
        </copy>

        <replace dir="${other.main.dir}/java" includes="**/*.java" propertyFile="build.properties">
            <replacefilter token="${our.class}" property="their.class"/>
        </replace>

        <replaceregexp match="${our.var}" replace="${their.var}" flags="g">
            <fileset dir="${other.main.dir}"/>
        </replaceregexp>

        <move file="${other.main.dir}/java/com/example/lab3/${our.class}.java" tofile="${other.main.dir}/java/com/example/lab3/${their.class}.java"/>
        <antcall target="build" inheritRefs="true">
            <param name="src.dir" value="${other.main.dir}"/>
            <param name="build.dir" value="alttarget"/>
            <param name="jar.name" value="alt${jar.name}"/>
        </antcall>

    </target>
</project>