<?xml version="1.0" encoding="UTF-8"?>

<project name="lab3" default="build">

    <property file="build.properties"/>

    <path id="classpath">
        <fileset dir="${lib.dir}" includes="*.jar"/>
        <fileset dir="${main.dir}" includes="*.java"/>
    </path>

    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${contrib}"/>
        </classpath>
    </taskdef>

    <path id="classpath.test">
        <pathelement location="${junit}"/>
        <pathelement location="${hamcrest}"/>
        <pathelement location="${classes.dir}"/>
    </path>

    <target name="prepare" depends="clean">
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${test.classes.dir}"/>
    </target>

    <target name="compile" depends="prepare">
        <javac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="classpath" includeantruntime="false"/>
    </target>

    <target name="build" depends="compile, music">
        <copy todir="${build.dir}">
            <fileset dir="${web.dir}"/>
        </copy>
        <copy todir="${build.dir.lib}">
            <fileset dir="${lib.dir}"/>
        </copy>
        <copy todir="${classes.dir}">
            <fileset dir="${resources.dir}"/>
        </copy>
        <jar destfile="${build.dir}/${ant.project.name}.jar">
            <fileset dir="${classes.dir}"/>
            <manifest>
                <attribute name="Created-By" value="abebka228"/>
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="Main-Class" value="NoClass"/>
            </manifest>
        </jar>
        <war destfile="${build.dir}/${ant.project.name}.war" webxml="${build.web.xml}">
            <fileset dir="${build.dir}"/>
            <manifest>
                <attribute name="Created-By" value="abebka228"/>
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="Main-Class" value="NoClass"/>
            </manifest>
        </war>
    </target>

    <target name="clean">
        <delete dir="${build.dir}"/>
        <delete dir="${junit.report.dir}"/>
    </target>

    <!-- music - воспроизведение музыки по завершению сборки (цель build) -->
    <target name="music">
        <sound>
            <success source="${sounds.dir}/sample-3s.wav" duration="5500"/>
            <fail source="${sounds.dir}/ample-9s.wav" duration="5000"/>
        </sound>
        <!-- Для отдельного запуска цели music -->
        <!--        <antcall target="build"/>-->
    </target>

    <target name="test" depends="build">
        <mkdir dir="${junit.report.dir}"/>
        <mkdir dir="${test.classes.dir}"/>
        <javac destdir="${test.classes.dir}" srcdir="${test.dir}" includeantruntime="false" encoding="utf-8">
            <classpath refid="classpath.test"/>
        </javac>
        <junit printsummary="yes" haltonfailure="no" failureproperty="test.failure">
            <classpath>
                <path refid="classpath.test"/>
                <pathelement location="${test.classes.dir}"/>
            </classpath>
            <formatter type="xml"/>
            <batchtest fork="yes" todir="${junit.report.dir}">
                <fileset dir="${test.dir}">
                    <include name="*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
        <!--        <property name="testo" value="${tests.failed}"/>-->
    </target>

    <target name="native2ascii">
        <native2ascii encoding="UTF8" src="${src.dir}" dest="${native2ascii.resources}" includes="**/*.properties">
            <mapper type="glob" from="*.properties" to="*_ascii.properties"/>
        </native2ascii>
    </target>

    <target name="xml">
        <xmlvalidate failonerror="true" lenient="true">
            <fileset dir="./" includes="**/*.xml"/>
        </xmlvalidate>
    </target>

    <target name="doc" depends="build">
        <delete dir="tmp"/>
        <delete dir="${doc.dir}"/>
        <mkdir dir="${doc.dir}"/>
        <mkdir dir="tmp"/>
        <!-- Generate Javadoc -->
        <javadoc destdir="tmp" sourcepath="${main.dir}" classpathref="classpath">
            <packageset dir="${src.dir}" defaultexcludes="yes">
                <include name="com/example/lab3/**"/>
            </packageset>
        </javadoc>

        <!-- Create a jar file for the generated Javadoc -->
        <jar destfile="${doc.dir}/javadoc.jar" basedir="tmp"/>
        <!-- Delete files that we archived -->
        <delete dir="tmp"/>

        <!-- Generate MD5 and SHA-1 for project files -->
        <checksum file="${build.dir}/lab3.war" property="md5value" algorithm="MD5"/>
        <checksum file="${build.dir}/lab3.war" property="sha1value" algorithm="SHA"/>

        <!-- Add MD5 and SHA-1 to MANIFEST.MF -->
        <jar destfile="${build.dir}/${ant.project.name}.war" update="true">
            <manifest>
                <attribute name="MD5-Digest" value="${md5value}"/>
                <attribute name="SHA1-Digest" value="${sha1value}"/>
            </manifest>
        </jar>
    </target>

    <!--
    <target name="diff">

        <loadfile property="checkClasses" srcFile="parameters.txt"/>
        <propertyregex property="classes.list" input="${checkClasses}" regexp="\s+" replace="," global="true"
                       override="true"/>

        <exec executable="git" outputproperty="git.status">
            <arg line="status porcelain"/>
        </exec>

        <for list="${classes.list}" param="class">
            <sequential>
                <condition property="class.@{class}.changed">
                    <contains string="${git.status}" substring="@{class}"/>
                </condition>

                <if>
                    <isset property="class.@{class}.changed"/>
                    <then>
                        <echo message="Changes in class: @{class}"/>
                        <exec executable="git">
                            <arg line="add @{class}"/>
                        </exec>
                        <exec executable="git">
                            <arg line="commit -m 'Commit changes in @{class}'"/>
                        </exec>
                    </then>
                </if>
            </sequential>
        </for>
    </target>

-->

    <target name="alt">

        <mkdir dir="${other.dir}"/>
        <copy todir="${other.main.dir}">
            <fileset dir="${src.dir}"/>
        </copy>

        <replace dir="${other.main.dir}/java" includes="**/*.java" propertyFile="build.properties">
            <replacefilter token="${our.class}" property="their.class"/>
        </replace>

        <replaceregexp match="${our.var}" replace="${their.var}" flags="g">
            <fileset dir="${other.main.dir}"/>
        </replaceregexp>

        <move file="${other.main.dir}/java/com/example/lab3/${our.class}.java" tofile="${other.main.dir}/java/com/example/lab3/${their.class}.java"/>
        <antcall target="build" inheritRefs="true">
            <param name="src.dir" value="${other.main.dir}"/>
            <param name="build.dir" value="alttarget"/>
            <param name="jar.name" value="alt${jar.name}"/>
        </antcall>

    </target>

    <!--  <for list="${classes.list}" param="class">
        <sequential>
            <condition property="changed">
                <contains string="${git.status}" substring="@{class}"/>
            </condition>
        </sequential>
                       <if>
                <isset property="changed"/>
                <then>

                    <exec executable="git">
                        <arg line="add *"/>
                    </exec>
                    <exec executable="git">
                        <arg line="commit -m 'Commit changes in classes'"/>
                    </exec>
                </then>
            </if>
    </for> -->

    <!--
    <target name="report" depends="test">
        <if>
            <not>
                <isset property="test.failure"/>
            </not>
            <then>
                <echo message="Tests passed"/>
                <exec executable="git">
                    <arg line="add ${junit.output.dir}/*.xml"/>
                </exec>
                <exec executable="git">
                    <arg line="commit -m 'Add JUnit report'"/>
                </exec>
            </then>
        </if>
    </target>

-->

    <!-- history - если проект не удаётся скомпилировать (цель compile), загружается предыдущая версия из репозитория git -->
    <target name="history">

        <!-- хэш первой ревизии (для будущего сравнения, что достигли первой ревизии) -->
        <exec executable="git" outputproperty="first_revision_hash">
            <arg line="rev-list --max-parents=0 HEAD"/>
        </exec>

        <!-- хэш самой последней ревизии -->
        <exec executable="git" outputproperty="git_base_revision">
            <arg line="rev-list -n 1 HEAD"/>
        </exec>

        <trycatch>
            <!-- попытка скомпилировать проект -->
            <try>
                <antcall target="compile"/>

                <!-- получаем хэш текущей ревизии если удалось скомпилировать -->
                <exec executable="git" outputproperty="git_current_revision">
                    <arg line="rev-parse HEAD"/>
                </exec>

                <!-- формируется diff между последней и текущей ревизией -->
                <echo message="run git diff ${git_base_revision}..${git_current_revision}"/>
                <exec executable="git">
                    <arg line="diff ${git_base_revision}..${git_current_revision}"/>
                </exec>
            </try>
            <catch>
                <!-- если не удалось скомпилировать то обрабатываем ошибку -->
                <echo message="Error compiling project"/>
                <!-- меняем ревизию на предыдущую -->
                <exec executable="git" outputproperty="git_revision">
                    <arg line="rev-parse HEAD^"/>
                </exec>
                <!-- если первая ревизия, то выводим сообщение, что пора останавливаться -->
                <if>
                    <equals arg1="${first_revision_hash}" arg2="${git_revision}"/>
                    <then>
                        <echo message="First revision reached / abort"/>
                    </then>
                    <!-- иначе меняем ревизию на предыдщую -->
                    <else>
                        <echo message="going down to the history... ${git_revision}"/>
                        <exec executable="git">
                            <arg line="checkout HEAD^"/>
                        </exec>
                        <!-- для новой ревизии запускаем снова ant history -->
                        <runtarget target="history"/>
                    </else>
                </if>
            </catch>
        </trycatch>
    </target>

</project>